//Nextflow config file for running on AWS batch

params {
  config_profile_description = 'Empress Tower Prod Profile'
  config_profile_contact = 'Manish Boolchandani (mboolchandani@empresstx.com)'
  config_profile_url = 'https://github.com/mboolchandani-empress/nf-configs'

  max_memory = '128.GB'
  max_cpus = 16
  max_time = '240.h'
}

executor {
      name = 'awsbatch'
      submitRateLimit = '1sec'
}

workDir = "s3://vl55-pipelines/scratch/"

aws {
    region = 'us-east-1'
    batch {
        cliPath = '/home/ec2-user/miniconda/bin/aws'
        delayBetweenAttempts = 100
    }
    client {
        uploadStorageClass = 'STANDARD_IA'
    }
}

docker {
    enabled = true
    fixOwnership = true
    temp = 'auto'
}

// Nextflow tower app
tower {
    accessToken = null
    enabled = false
    workspaceId = '87954820946224'
}

process {
    executer = 'awsbatch'
    cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
    memory = { check_max( 3.5.GB * task.attempt, 'memory' ) }
  
    errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
    maxRetries    = 3
    maxErrors     = '-1'

    withLabel:process_single {
        cpus = { task.attempt > 2 ? check_max(4, 'cpus') : check_max(2, 'cpus') }
        memory = { check_max( 3.5.GB * task.attempt, 'memory'  ) }
    }
    
    withLabel:process_low {
        cpus = { task.attempt > 2 ? check_max(4, 'cpus') : check_max(2, 'cpus') }
        memory = { check_max( 3.5.GB * task.attempt, 'memory'  ) }
    }

    withLabel:process_medium {
        cpus = { task.attempt > 2 ? check_max(8, 'cpus') : check_max(4, 'cpus') }
        memory = { check_max( 15.GB * task.attempt, 'memory'  ) }
    }

    withLabel:process_high {
        cpus = { task.attempt > 2 ? check_max(8, 'cpus') : check_max(4, 'cpus') }
        memory = { check_max( 30.GB * task.attempt, 'memory'  ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }

    withLabel:process_high_memory {
         cpus   = { check_max( 8    * task.attempt, 'cpus'    ) }
         memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    }

    withLabel:error_ignore {
         errorStrategy = 'ignore'
    }

    withLabel:error_retry {
         errorStrategy = 'retry'
         maxRetries    = 3
    }

    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
         cache = false
    }
}
